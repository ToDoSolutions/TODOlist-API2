name: Codecov

# Define los eventos que activarán este flujo de trabajo. En este caso, se ejecutará en cada push y pull_request.
on:
  push:
  pull_request:

jobs:
  # Define el trabajo llamado "codecov".
  codecov:
    runs-on: ubuntu-latest # Define el sistema operativo en el que se ejecutará el trabajo.

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        # Paso para clonar el código fuente del repositorio en la máquina de ejecución. Utiliza la acción "actions/checkout@v2".

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
        # Configura el entorno de ejecución con JDK 17 utilizando Temurin (una distribución de OpenJDK).

      - name: Build and Run Tests with JaCoCo
        run: |
          mvn clean verify
          mvn jacoco:report
        # Ejecuta los comandos "mvn clean verify" para construir y ejecutar las pruebas del proyecto.
        # Luego, utiliza "mvn jacoco:report" para generar el informe de cobertura de código con JaCoCo.

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./target/site/jacoco/jacoco.xml
          token: ${{ secrets.CODECOV_TOKEN }}
        # Utiliza la acción "codecov/codecov-action@v3" para cargar el informe de cobertura de código generado por JaCoCo en Codecov.
        # Se especifica el archivo "jacoco.xml" que contiene el informe de cobertura y se proporciona el token de acceso "CODECOV_TOKEN"
        # desde los secretos de GitHub utilizando "${{ secrets.CODECOV_TOKEN }}".

